#!/bin/sh
# Interactive script to run wgs_prism2 on a WGS Illumina Sequencing Run.

module purge && module load Miniforge3/24.9.0-0
module load snakemake/7.32.3-foss-2023a-Python-3.11.6
WGS_PRISM_BIN=/projects/2023_sequence_production/wgs_prism
cd $WGS_PRISM_BIN

ILLUMINA_PROJECT=2024_illumina_sequencing_g
SMK_CONFIG_DIR=config/slurm/eRI
SEQ_ROOT=/projects/$ILLUMINA_PROJECT/run_data
SEQ_BCLCONVERT_ROOT=/projects/$ILLUMINA_PROJECT/postprocessing/illumina
OUT_ROOT=""


get_run_opts() {
   echo "Running Illumina Sequence Production and MultiQC Report Gerneration."

   ####### get and check RUN
   while [ 1 ]; do
      echo "Please give the full name of the Illumina run:(e.g. 210712_A01439_0006_AHC7MJDRXY): "
      echo
      read_answer_with_default $ARGRUN
      RUN=$answer

      if [ -z "$SEQ_ROOT/$RUN" ]; then

         echo "sorry can't find $RUN under $SEQ_ROOT"
         quit
      else
         if [ -d "$SEQ_ROOT/$RUN" ]; then
            break
         fi
      fi
   done

   echo "will process $SEQ_ROOT/$RUN"
   echo

   RUN_TYPE=$(python workflow/scripts/runinfo_to_machinetype.py $SEQ_ROOT/$RUN/RunInfo.xml)
   mkdir -p $SEQ_BCLCONVERT_ROOT/$RUN_TYPE

   ####### find the sample sheet  - e.g. could be HNFW2DRXY.csv or SampleSheet.csv

   SAMPLE_SHEET=$SEQ_ROOT/$RUN/SampleSheet.csv
   if [ ! -f $SAMPLE_SHEET ]; then
      SAMPLE_SHEET=$(ls $SEQ_ROOT/$RUN/*.csv 2>/dev/null)
      if [ $? != 0 ]; then
         echo "sorry can't find the sample-sheet for this run under $SEQ_ROOT/$RUN
try /dataset/hiseq/active/sample-sheets. If it is there, please copy to the run folder $SEQ_ROOT/$RUN
"
         exit 1
      fi
      base=$(basename $SAMPLE_SHEET .csv)
      echo $RUN | grep $base >/dev/null 2>&1
      if [ $? != 0 ]; then
         echo "sorry can't find the sample-sheet for this run under $SEQ_ROOT/$RUN
try /dataset/hiseq/active/sample-sheets. If it is there, please copy to the run folder $SEQ_ROOT/$RUN
"
         exit 1
      fi
   fi

   ######## confirm output folder ###########
   # set up output folder

   while [ 1 ]; do
      echo "Please specify the output folder, or press ENTER to use the default: $SEQ_BCLCONVERT_ROOT/$RUN_TYPE/$RUN "
      read_answer_with_default $SEQ_BCLCONVERT_ROOT/$RUN_TYPE/$RUN
      NEW_ROOT=$answer
      if [ -d $NEW_ROOT ]; then
         echo
         echo "Warning: $NEW_ROOT already exists, use anyway ? (y/n; default=y)"
         read_answer_with_default y
         if [ $answer == "y" ]; then
            OUTPUT_ROOT=$NEW_ROOT
            break
         fi
      else
         mkdir -p $NEW_ROOT
         if [ -d $NEW_ROOT ]; then
            OUTPUT_ROOT=$NEW_ROOT
            break
         fi
      fi
   done

   echo
   echo "Will use run  $SEQ_ROOT/$RUN"
   echo "Will use output folder $OUTPUT_ROOT"
   echo "Proceed with sequence production and multiQC report generation ? (y/n; default=y)"
   read_answer_with_default y
   if [ "$answer" != "y" ]; then
      echo "OK quiting..."
      exit 0
   else
      echo
      run_sequencer_qc
   fi

}


read_answer_with_default() {
   if [ $INTERACTIVE == yes ]; then
      read answer
      echo "User response: $answer"
      if [ -z "$answer" ]; then
         answer=$@
         echo "Default response: $answer"
      fi
   else
      answer=$@
      echo "Default response: $answer"
   fi
}


get_opts() {
   INTERACTIVE=no
   INTERACTIVE_OPT=""
   ARGRUN=""
   help_text="
This script is called by run_wgs_qc.
"
   while getopts ":hir:" opt; do
      case $opt in
      h)
         echo -e $help_text
         exit 0
         ;;
      i)
         INTERACTIVE=yes
         INTERACTIVE_OPT="-i"
         ;;
      r)
         ARGRUN=$OPTARG
         ;;
      \?)
         echo "Invalid option: -$OPTARG" >&2
         exit 1
         ;;
      :)
         echo "Option -$OPTARG requires an argument." >&2
         exit 1
         ;;
      esac
   done

   shift $((OPTIND - 1))

}

run_sequencer_qc() {

   echo "Checking run is completed (i.e. looking for $SEQ_ROOT/$RUN/RTAComplete.txt)..."
   if [ ! -f $SEQ_ROOT/$RUN/RTAComplete.txt ]; then
      echo "Warning: $SEQ_ROOT/$RUN/RTAComplete.txt does not exist, this run has not completed sequencing or uploading! Are you SURE you want to continue? (y/n; default n)"
      read_answer_with_default n
      if [ $answer != "y" ]; then
         echo "OK quitting."
         exit 1
      else
         echo "OK will continue..."
      fi
   fi

   # set up for bclconvert run
   mkdir -p $OUTPUT_ROOT/SampleSheet
   mkdir -p $OUTPUT_ROOT/logs

   if [ ! -d $OUTPUT_ROOT/SampleSheet ]; then
      echo "Error: could not create bclconvert output folder $OUTPUT_ROOT/SampleSheet... I quit."
      exit 1
   fi

   # Gather sample sheet from active
   if [ ! -f $OUTPUT_ROOT/SampleSheet.csv ]; then
      echo "Copying $SAMPLE_SHEET to $OUTPUT_ROOT/SampleSheet.csv "
      cp $SAMPLE_SHEET $OUTPUT_ROOT/SampleSheet.csv
   fi

   echo "
  Using sample sheet $OUTPUT_ROOT/SampleSheet.csv for bclconvert.
  Please review and edit this samples sheet making any necessary changes for batch processing. 

  If this is batched with indices of different lengths, you will need to do the following:

  1) Add OverrideCycles options under [Settings] such as,
  # 151 PE reads with 10bp i5 and no i7 index
  [Settings]
  OverrideCycles,Y151;I10;N10;Y151
  # 101 PE reads with 8bp i5 and i7 indices
  [Settings]
  OverrideCycles,Y101;I8N2;I8N2;Y101,,,,,,,,
  # 151 PE reads with 8 bp indices
  [Settings]
  OverrideCycles,Y151;I8N2;I8N2;Y151,,,,,,,,
  # 101 bp SE read with 10 bp i5 and 8bp i7
  [Settings]
  OverrideCycles,Y101;I10;I8N2,,,,,,,,

  2) You will need to remove all samples from the sample sheet which are not part of this batch.
  In reprocessing of this run (eg. other batches) you will be prompted to modify the original sample sheet again.

  If this run requires the removal of T-overhangs:
  [Settings]
  OverrideCycles,N1Y150;I10;I10;N1Y150

  Ref https://support.illumina.com/bulletins/2020/06/trimming-t-overhang-options-for-the-illumina-rna-library-prep-wo.html

  If this run has UMIs which need to be demultiplexed and captured:
  Note: if the indices in the sample sheet are supplied with N for the UMIs remove those and leave the index sequences.

  # 101 bp PE reads with 12 bp UMI and 8 bp i5 index and 8 bp i7 index
  [Settings],,,,,,,,,
  OverrideCycles,Y101;U12I8;I8;Y101,,,,,,,,
  CreateFastqForIndexReads,1,,,,,,,,
  TrimUMI,0,,,,,,,,
  # 101 bp PE reads with 20 bp UMI and 8 bp i7 index
  [Settings],,,,,,,,,
  OverrideCycles,Y101;U20;I8;Y101,,,,,,,,
  CreateFastqForIndexReads,1,,,,,,,,
  TrimUMI,0,,,,,,,,

  Ref: https://knowledge.illumina.com/software/on-premises-software/software-on-premises-software-reference_material-list/000007337
  "
   echo "Press Enter to review sample sheet in vim."
   read_answer_with_default ""

   vim $OUTPUT_ROOT/SampleSheet.csv

   echo "Proceed with updated SampleSheet.csv? (y/n; default y):"
   read_answer_with_default y
   if [ $answer != "y" ]; then
      echo "OK quitting..."
      exit 1
   fi

   ###### ensure output folder does not exist
   if [ -d $OUTPUT_ROOT/SampleSheet/bclconvert ]; then
      echo "Error: $OUTPUT_ROOT/SampleSheet/bclconvert already exists, please clean up and retry."
      exit 1
   fi


   echo "
About to run sequence production and multiQC generation using:

snakemake --profile $SMK_CONFIG_DIR --snakefile workflow/wgs_prism.smk --config OUT_ROOT=$OUTPUT_ROOT IN_ROOT=$SEQ_ROOT RUN=$RUN

OK ? (y/n, default=y):
"

   read_answer_with_default y
   if [ $answer != "y" ]; then
      echo "OK quitting..."
      exit 1
   fi
   echo "Starting..."

   echo "snakemake --profile $SMK_CONFIG_DIR --snakefile workflow/wgs_prism.smk --config OUT_ROOT=$OUTPUT_ROOT IN_ROOT=$SEQ_ROOT RUN=$RUN "
   
   snakemake --profile $SMK_CONFIG_DIR --snakefile workflow/wgs_prism.smk --config OUT_ROOT=$OUTPUT_ROOT IN_ROOT=$SEQ_ROOT RUN=$RUN > $OUTPUT_ROOT/logs/wgs_prism.log
   
   if [ $? != 0 ]; then
      echo "Error: run wgs_prism run failed - please check $OUTPUT_ROOT/logs/wgs_prism.log"
      exit 1
   fi

   echo "Sequence production and multiQC report generation completed."
   echo "Results: $OUTPUT_ROOT"
   echo "MultiQC: $OUTPUT_ROOT/SampleSheet/multiqc/$RUN.multiqc.html"

}


get_opts "$@"
get_run_opts
